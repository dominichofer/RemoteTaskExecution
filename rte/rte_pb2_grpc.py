# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rte import rte_pb2 as rte_dot_rte__pb2


class RteStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_next_id = channel.unary_unary(
                '/Rte/get_next_id',
                request_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.OptionalTaskId.FromString,
                )
        self.return_id = channel.unary_unary(
                '/Rte/return_id',
                request_serializer=rte_dot_rte__pb2.TaskId.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.Empty.FromString,
                )
        self.add_task = channel.unary_unary(
                '/Rte/add_task',
                request_serializer=rte_dot_rte__pb2.Task.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.Empty.FromString,
                )
        self.get_task = channel.unary_unary(
                '/Rte/get_task',
                request_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.OptionalTask.FromString,
                )
        self.set_result = channel.unary_unary(
                '/Rte/set_result',
                request_serializer=rte_dot_rte__pb2.Result.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.Empty.FromString,
                )
        self.get_results = channel.unary_unary(
                '/Rte/get_results',
                request_serializer=rte_dot_rte__pb2.TaskIds.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.OptionalResults.FromString,
                )
        self.cancel_task = channel.unary_unary(
                '/Rte/cancel_task',
                request_serializer=rte_dot_rte__pb2.TaskId.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.Empty.FromString,
                )
        self.is_task_canceled = channel.unary_unary(
                '/Rte/is_task_canceled',
                request_serializer=rte_dot_rte__pb2.TaskId.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.Bool.FromString,
                )
        self.release_waiting_workers = channel.unary_unary(
                '/Rte/release_waiting_workers',
                request_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
                response_deserializer=rte_dot_rte__pb2.Empty.FromString,
                )


class RteServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_next_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def return_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_results(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def is_task_canceled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def release_waiting_workers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_next_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_next_id,
                    request_deserializer=rte_dot_rte__pb2.Empty.FromString,
                    response_serializer=rte_dot_rte__pb2.OptionalTaskId.SerializeToString,
            ),
            'return_id': grpc.unary_unary_rpc_method_handler(
                    servicer.return_id,
                    request_deserializer=rte_dot_rte__pb2.TaskId.FromString,
                    response_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
            ),
            'add_task': grpc.unary_unary_rpc_method_handler(
                    servicer.add_task,
                    request_deserializer=rte_dot_rte__pb2.Task.FromString,
                    response_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
            ),
            'get_task': grpc.unary_unary_rpc_method_handler(
                    servicer.get_task,
                    request_deserializer=rte_dot_rte__pb2.Empty.FromString,
                    response_serializer=rte_dot_rte__pb2.OptionalTask.SerializeToString,
            ),
            'set_result': grpc.unary_unary_rpc_method_handler(
                    servicer.set_result,
                    request_deserializer=rte_dot_rte__pb2.Result.FromString,
                    response_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
            ),
            'get_results': grpc.unary_unary_rpc_method_handler(
                    servicer.get_results,
                    request_deserializer=rte_dot_rte__pb2.TaskIds.FromString,
                    response_serializer=rte_dot_rte__pb2.OptionalResults.SerializeToString,
            ),
            'cancel_task': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel_task,
                    request_deserializer=rte_dot_rte__pb2.TaskId.FromString,
                    response_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
            ),
            'is_task_canceled': grpc.unary_unary_rpc_method_handler(
                    servicer.is_task_canceled,
                    request_deserializer=rte_dot_rte__pb2.TaskId.FromString,
                    response_serializer=rte_dot_rte__pb2.Bool.SerializeToString,
            ),
            'release_waiting_workers': grpc.unary_unary_rpc_method_handler(
                    servicer.release_waiting_workers,
                    request_deserializer=rte_dot_rte__pb2.Empty.FromString,
                    response_serializer=rte_dot_rte__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Rte', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rte(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_next_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/get_next_id',
            rte_dot_rte__pb2.Empty.SerializeToString,
            rte_dot_rte__pb2.OptionalTaskId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def return_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/return_id',
            rte_dot_rte__pb2.TaskId.SerializeToString,
            rte_dot_rte__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/add_task',
            rte_dot_rte__pb2.Task.SerializeToString,
            rte_dot_rte__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/get_task',
            rte_dot_rte__pb2.Empty.SerializeToString,
            rte_dot_rte__pb2.OptionalTask.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/set_result',
            rte_dot_rte__pb2.Result.SerializeToString,
            rte_dot_rte__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_results(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/get_results',
            rte_dot_rte__pb2.TaskIds.SerializeToString,
            rte_dot_rte__pb2.OptionalResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/cancel_task',
            rte_dot_rte__pb2.TaskId.SerializeToString,
            rte_dot_rte__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def is_task_canceled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/is_task_canceled',
            rte_dot_rte__pb2.TaskId.SerializeToString,
            rte_dot_rte__pb2.Bool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def release_waiting_workers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Rte/release_waiting_workers',
            rte_dot_rte__pb2.Empty.SerializeToString,
            rte_dot_rte__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
